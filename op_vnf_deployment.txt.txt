from __future__ import print_function

import json
from collections import defaultdict
from sklearn.preprocessing import StandardScaler
import threading
import pickle
import datetime as dt
import ni_mon_client
import ni_nfvo_client
import numpy as np
from datetime import datetime
from keras.engine.saving import load_model, model_from_json
from spektral.layers import EdgeConditionedConv

from config import cfg
import time

from builtins import range
import glob
import re
import subprocess

# from models.sfc_info import SFCInfo

# get_monitoring_api(): get ni_monitoring_client api to interact with a monitoring module
# Input: null
# Output: monitoring moudle's client api
def get_monitoring_api():
    ni_mon_client_cfg = ni_mon_client.Configuration()
    ni_mon_client_cfg.host = cfg["ni_mon"]["host"]
    ni_mon_api = ni_mon_client.DefaultApi(ni_mon_client.ApiClient(ni_mon_client_cfg))

    return ni_mon_api


# get_nfvo_vnf_api(): get ni_nfvo_vnf api to interact with a nfvo module
# Input: null
# Output: nfvo moudle's vnf api
def get_nfvo_vnf_api():
    nfvo_client_cfg = ni_nfvo_client.Configuration()
    nfvo_client_cfg.host = cfg["ni_nfvo"]["host"]
    ni_nfvo_vnf_api = ni_nfvo_client.VnfApi(ni_nfvo_client.ApiClient(nfvo_client_cfg))

    return ni_nfvo_vnf_api


# get_nfvo_sfc_api(): get ni_nfvo_sfc api to interact with a nfvo module
# Input: null
# Output: nfvo moudle's sfc api
def get_nfvo_sfc_api():
    nfvo_client_cfg = ni_nfvo_client.Configuration()
    nfvo_client_cfg.host = cfg["ni_nfvo"]["host"]
    ni_nfvo_sfc_api = ni_nfvo_client.SfcApi(ni_nfvo_client.ApiClient(nfvo_client_cfg))

    return ni_nfvo_sfc_api


# get_nfvo_sfcr_api(): get ni_nfvo_sfcr api to interact with a nfvo module
# Input: null
# Output: nfvo moudle's sfcr api
def get_nfvo_sfcr_api():
    nfvo_client_cfg = ni_nfvo_client.Configuration()
    nfvo_client_cfg.host = cfg["ni_nfvo"]["host"]
    ni_nfvo_sfcr_api = ni_nfvo_client.SfcrApi(ni_nfvo_client.ApiClient(nfvo_client_cfg))

    return ni_nfvo_sfcr_api


# get_ip_from_vm(vm_id):
# Input: vm instance id
# Output: port IP of the data plane
def get_ip_from_id(vm_id):
    ni_mon_api = get_monitoring_api()
    query = ni_mon_api.get_vnf_instance(vm_id)

    # Hard coding for network id of the data plane
    ports = query.ports
    network_id = "52b3b564-0be1-49f2-9b67-1cee170acbdb"

    for port in ports:
        if port.network_id == network_id:
            return port.ip_addresses[-1]


# get_topology() : get topology information from monitoring module
# Input : -
# Output : topo_array :: array (nodes_num X nodes_num), topology.txt파일, nodes_dict, vnf_types_dict
# testbed에서 해당 모듈의 테스트 대상이 되는 NODE만 추려야할 필요
nodes_dict = {}
nodes_type_dict = {}
nodes_dict_r = {}

# TODO 하드코딩 -> 입력으로 받을 수 있게 바꾸기
vnf_types = ["fw_1", "fw_3", "ids_1", "ids_2", "nat_1", "nat_2", "nat_3"]
vnf_types_dict = {}
vnf_types_dict_r = {}


def get_topology():
    ni_mon_api = get_monitoring_api()
    nodes = ni_mon_api.get_nodes()
    links = ni_mon_api.get_links()
    # print("###nodes", nodes)
    # nodes_dict = {}
    for n in range(0, len(nodes)):
        node_name = nodes[n].name
        nodes_dict[n] = node_name
        nodes_type_dict[n] = nodes[n].type
        nodes_dict_r[node_name] = n
    # print("##nodes_dict", nodes_dict)

    # vnf_types_dict = {}
    for vt in range(0, len(vnf_types)):
        vnf_types_dict[vt] = vnf_types[vt]
        vnf_types_dict_r[vnf_types[vt]] = vt
    # print("##vnf_types_dict_r\n", vnf_types_dict_r)

    # print(links)
    nodes_num = len(nodes_dict)
    topology = np.zeros((nodes_num, nodes_num))

    with open('topology.txt', 'w') as fout:
        fout.write(str(nodes_num) + " " + str(len(links)) + '\n')
        for i in range(0, len(nodes_dict)):
            fout.write(str(i) + " " + str(nodes[i].n_cores) + "\n")
        for j in range(0, len(links)):
            fout.write(str(nodes_dict_r[links[j].node1_id]) + " "
                       + str(nodes_dict_r[links[j].node2_id]) + " " + str(links[j].max_bw_mbps) + " "
                       + str(links[j].delay_us) + "\n")

            # topology[nodes_dict_r[links[j].node1_id], nodes_dict_r[links[j].node2_id]] = 1
            # topology[nodes_dict_r[links[j].node2_id], nodes_dict_r[links[j].node1_id]] = 1

            topology[nodes_dict_r[links[j].node1_id], nodes_dict_r[links[j].node2_id]] = (links[
                                                                                                              j].max_bw_mbps /
                                                                                                          links[
                                                                                                              j].delay_us) * 100000
            topology[nodes_dict_r[links[j].node2_id], nodes_dict_r[links[j].node1_id]] = (links[
                                                                                                              j].max_bw_mbps /
                                                                                                          links[
                                                                                                              j].delay_us) * 100000

    topology = np.nan_to_num(topology)
    return topology


# get_sfcr_list() : get sfcr information from monitoring module
# Input: -
# Output: Current sfcr list  [srcr, srcr]
# TODO 하드코딩 -> 입력으로 받을 수 있게 바꾸기
def get_sfcr_list():  # service request list임
    ni_nfvo_api = get_nfvo_sfcr_api()
    sfcrs = ni_nfvo_api.get_sfcrs()
    penalty = 0.00000010
    # print(sfcrs)
    sfcrsList = []
    sfcrItem = []
    for i in range(0, len(sfcrs)):
        sfcrs[i].arrivaltime = str((sfcrs[i].arrivaltime.replace(tzinfo=None) - datetime.now()).seconds)
        sfcrItem = [
            sfcrs[i].arrivaltime
            , sfcrs[i].duration
            , sfcrs[i].source_client
            , sfcrs[i].destination_client
            , sfcrs[i].nf_chain[0] if len(sfcrs[i].nf_chain) > 0 else 'NA'
            , sfcrs[i].nf_chain[1] if len(sfcrs[i].nf_chain) > 1 else 'NA'
            , sfcrs[i].nf_chain[2] if len(sfcrs[i].nf_chain) > 2 else 'NA'
            , sfcrs[i].nf_chain[3] if len(sfcrs[i].nf_chain) > 3 else 'NA'
            , 0.00000010
            , sfcrs[i].bw
            , sfcrs[i].delay
        ]
        sfcrsList.append(sfcrItem)
    # sfcrs = str(sfcrs).replace("\'", "\"")
    # sfcrs_str = sfcrs.replace("None", "\"\"")
    # print(sfcrs_str)
    # sfcrs_JSON = json.loads(sfcrs_str)
    # print (sfcrs_JSON)
    return sfcrsList


# get_vnf_info(sfc_prefix, sfc_vnfs): get each VNF instance ID and information from monitoring module
# Input: Prefix of VNF instance name, SFC order tuple [example] ("client", "firewall", "dpi", "ids", "proxy")
# Output: server X vnf type matrix (cur_vnf_deployment)
def get_current_vnf_deployment(prefix):  # sfc_prefix, sfc_vnfs
    ni_mon_api = get_monitoring_api()
    vnfis = ni_mon_api.get_vnf_instances()
    # print(vnfis)
    target_vnfi = [vnfi for vnfi in vnfis for vnf_type in vnf_types if vnfi.name.startswith(prefix + vnf_type) and vnfi.node_id is not None]
    # print(target_vnfi)
    nodes_num = len(nodes_dict_r)
    types_num = len(vnf_types)
    # print(types_num)
    vnf_deployment_array = np.zeros((nodes_num, types_num))
    for i in range(0, len(target_vnfi)):
        type_info = target_vnfi[i].name.split('-')[1]
        node_info_list = target_vnfi[i].name.split('-')[2:]
        node_info = '-'.join(node_info_list)
        # print("node_info >>>", node_info)
        if type_info in vnf_types and node_info != 'fixed':
            vnf_deployment_array[nodes_dict_r[node_info]][vnf_types.index(type_info)] += 1

    # print(vnf_deployment_array)
    return vnf_deployment_array


# get_vnf_resources(vnfi_list): get resources info. of VNF instance from the monitoring module
# Input : id, measurement_type, start_time, end_time
# Output: node feature/ edge feature (CPU usage, Traffic usage)
# 링크 별 usage를 직접 받아올 수는 없어서 서버 노드와 연결된 링크에 대해서만 edge feature 추출 가능
def get_resource_usage(monitoring_time):
    # node feature : CPU 사용 관련 통계치
    # print("##nodes_dict", nodes_dict)
    # print("##nodes_dict_r", nodes_dict_r)
    ni_mon_api = get_monitoring_api()
    nodes_num = len(nodes_dict_r)
    node_feature = np.zeros((nodes_num, 6))
    nodes = ni_mon_api.get_nodes()

    vnf_flavors = ni_mon_api.get_vnf_flavors()
    flavor_n_cores_dict = {}
    for f in range(0, len(vnf_flavors)):
        flavor_n_cores_dict[vnf_flavors[f].id] = vnf_flavors[f].n_cores
    # print("##flavor_n_cores_dict", flavor_n_cores_dict)
    vnf_instances = ni_mon_api.get_vnf_instances()
    if monitoring_time is None or monitoring_time == 0:
        monitoring_time = 10
    end_time = dt.datetime.now()
    start_time = end_time - dt.timedelta(seconds=monitoring_time)

    for i in range(0, len(nodes)):
        node_feature[nodes_dict_r[nodes[i].id]][0] = nodes[i].n_cores
        # 각 노드 별 VNF 인스턴스 정보를 모아서, 사용중인 core 수를 계산
        node_vnfi_favor = [vnfi.flavor_id for vnfi in vnf_instances if vnfi.node_id == nodes[i].id]
        # print(node_vnfi_favor)
        used_n_cores = 0
        for v in range(0, len(node_vnfi_favor)):
            if node_vnfi_favor[v] in flavor_n_cores_dict:
                used_n_cores += flavor_n_cores_dict[node_vnfi_favor[v]]
        node_feature[nodes_dict_r[nodes[i].id]][1] = used_n_cores

        # CPU 사용 모니터링 결과 통계치 계산
        vnf_id = nodes[i].id
        measurement_type = "cpu_usage___value___gauge"
        response = ni_mon_api.get_measurement(vnf_id, measurement_type, start_time, end_time)
        cpu_raw = []
        for j in range(0, len(response)):
            cpu_raw.append(response[j].measurement_value)
        # print(cpu_raw)
        if not cpu_raw:
            continue
        cpu_current = cpu_raw[-1]
        cpu_min = np.min(cpu_raw)
        cpu_max = np.max(cpu_raw)
        cpu_mean = np.mean(cpu_raw)
        cpu_slope = (cpu_raw[-1] - cpu_raw[0]) / monitoring_time
        # node_feature[nodes_dict_r[nodes[i].id]][2] = cpu_current
        node_feature[nodes_dict_r[nodes[i].id]][2] = cpu_min
        node_feature[nodes_dict_r[nodes[i].id]][3] = cpu_max
        node_feature[nodes_dict_r[nodes[i].id]][4] = cpu_mean
        node_feature[nodes_dict_r[nodes[i].id]][5] = cpu_slope
    # print(node_feature)
    # print(type(node_feature))

    # edge feature : Traffic 사용 관련 통계치
    edge_feature = np.zeros((nodes_num, nodes_num, 7))
    links = ni_mon_api.get_links()
    # print("###links", links)
    # target_nodes = [link.node2_id for link in links]
    # print("###target_nodes", target_nodes)

    for ii in range(0, len(links)):
        # 각 link의 delay와 최대 bw
        firstIdx = nodes_dict_r[links[ii].node1_id]
        secondIdx = nodes_dict_r[links[ii].node2_id]
        edge_feature[firstIdx][secondIdx][0] = links[ii].delay_us
        edge_feature[secondIdx][firstIdx][0] = links[ii].delay_us
        edge_feature[firstIdx][secondIdx][1] = links[ii].max_bw_mbps
        edge_feature[secondIdx][firstIdx][1] = links[ii].max_bw_mbps

        vnf_id = links[ii].node2_id
        measurement_types = ni_mon_api.get_measurement_types(vnf_id)
        measurement_types_dv = ["if_packets___rx", "if_packets___tx"]
        for dd in range(0, len(measurement_types_dv)):
            for mm in range(0, len(measurement_types)):
                if measurement_types_dv[dd] in measurement_types[mm]:
                    measurement_type = measurement_types[mm]
            # measurement_type = "cpu_usage___value___gauge"
            response = ni_mon_api.get_measurement(vnf_id, measurement_type, start_time, end_time)
            # print("###measurement_type", measurement_type)
            # print("###response", response)
            # print("###nodes_dict_r", nodes_dict_r)
            bw_raw = []
            for jj in range(0, len(response)):
                bw_raw.append(response[jj].measurement_value)
            # print(bw_raw)
            if not bw_raw:
                continue
            bw_current = bw_raw[-1]
            bw_min = np.min(bw_raw)
            bw_max = np.max(bw_raw)
            bw_mean = np.mean(bw_raw)
            bw_slope = (bw_raw[-1] - bw_raw[0]) / monitoring_time
            edge_feature[firstIdx][secondIdx][2] = bw_current
            edge_feature[firstIdx][secondIdx][3] = bw_min
            edge_feature[firstIdx][secondIdx][4] = bw_max
            edge_feature[firstIdx][secondIdx][5] = bw_mean
            edge_feature[firstIdx][secondIdx][6] = bw_slope

            # if_packets___tx의 경우 출발지를 node2로 도착지를 node1으로 하기 위해
            if dd == 0:
                tempIdx = firstIdx
                firstIdx = secondIdx
                secondIdx = tempIdx
        # print(edge_feature)
    node_feature = np.nan_to_num(node_feature)
    edge_feature = np.nan_to_num(edge_feature)
    return node_feature, edge_feature


# predict_op_vnf_deployment(node_feature, topo_array, edge_feature): predict optimal VNF deployment module
# Input : node_feature, topo_array, edge_feature :: node feature/ edge feature (CPU usage, Traffic usage)
# Output: deployment


def predict_op_vnf_deployment2(node_feature, topo_array, edge_feature):
    # model = load_model('vnf_placement_whole_model.h5')
    with open('vnf_placement_model.json', 'r') as f:
        model_dict = json.load(f)
        # print(model_dict)
    model_json = json.dumps(model_dict)
    model = model_from_json(model_json, custom_objects={'EdgeConditionedConv': EdgeConditionedConv})
    model.load_weights('vnf_placement_model.h5')
    # print(model.summary())

    node_feature = np.reshape(node_feature, ((1,) + node_feature.shape))
    topo_array = np.reshape(topo_array, ((1,) + topo_array.shape))
    edge_feature = np.reshape(edge_feature, ((1,) + edge_feature.shape))

    # print("###node_feature\n", node_feature)
    # print("###topo_array\n", topo_array)
    # print("###edge_feature\n", edge_feature)

    deployment = model.predict([node_feature, topo_array, edge_feature])
    # print(deployment)
    return deployment
    
    
def predict_op_vnf_deployment():
    # model = load_model('vnf_placement_whole_model.h5')
    with open('vnf_placement_model_cnsm.json', 'r') as f:
        model_dict = json.load(f)
        # print(model_dict)
    model_json = json.dumps(model_dict)
    model = model_from_json(model_json)
    model.load_weights('vnf_placement_model_cnsm.h5')

    with open('X1_sfc1_ni.pickle', 'rb') as fr:
                    try:
                        while True:
                            u = pickle._Unpickler(fr)
                            u.encoding='latin1'
                            p = u.load()
                            X1 = p
                    except EOFError:
                        pass

    with open('X2_sfc1_ni.pickle', 'rb') as fr:
                    try:
                        while True:
                            u = pickle._Unpickler(fr)
                            u.encoding='latin1'
                            p = u.load()
                            X2 = p
                    except EOFError:
                        pass

                   
    Dn = len(X1)
    X1 =np.asarray(X1)
    #Preprocessing
    scaler = StandardScaler()
    z = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,40000,700]
    Temp_X1 = np.reshape(X1, (Dn* X1.shape[1], X1.shape[2]))
    Temp_X1 = Temp_X1/z
    X1 = np.reshape(Temp_X1, (Dn, X1.shape[1], X1.shape[2]))
    #only use for one test data
    
    X1 = np.reshape(X1, ((1,) + X1.shape))
      
    sfc_feature = X1[0]
    deployment = model.predict([sfc_feature])
    deployment = np.argmax(deployment,axis=-1) #classifcation to regression
    return deployment


def clean_sfc(prefix):
    ni_nfvo_api = get_nfvo_sfc_api()
    sfcs = ni_nfvo_api.get_sfcs()
    target_sfcs = []
    for i in range(0, len(sfcs)):
        if sfcs[i].sfc_name.startswith(prefix):
            target_sfcs.append(sfcs[i].id)
    # threads = []
    for j in range(0, len(target_sfcs)):
        deletion_target_id = target_sfcs[j]
        # print("Threading start >>> target_sfc", deletion_target_id)
        # t = threading.Thread(target=api_call_clean_sfc, args=(deletion_target_id, ))
        # t.start()
        # threads.append(t)
        # print("Threading end >>> target_sfc")
        api_call_clean_sfc(deletion_target_id,)
    # for t in threads:
    #     t.join()
    return True


# TODO 테스트
def api_call_clean_sfc(sfc_id):
    ni_nfvo_sfc_api = get_nfvo_sfc_api()
    api_response = ni_nfvo_sfc_api.del_sfc(sfc_id)
    print("### clean_sfc_api_response", api_response)


def clean_sfcr(prefix):
    ni_nfvo_api = get_nfvo_sfcr_api()
    sfcrs = ni_nfvo_api.get_sfcrs()
    target_sfcrs = []
    for i in range(0, len(sfcrs)):
        if sfcrs[i].name.startswith(prefix):
            target_sfcrs.append(sfcrs[i].id)
    # threads = []
    for j in range(0, len(target_sfcrs)):
        deletion_target_id = target_sfcrs[j]
        # print("Threading start >>> target_sfcr", deletion_target_id)
        # t = threading.Thread(target=api_call_clean_sfcr, args=(deletion_target_id, ))
        # t.start()
        # threads.append(t)
        # print("Threading end >>> target_sfcr")
        api_call_clean_sfcr(deletion_target_id, )
    # for t in threads:
    #     t.join()
    return True


# TODO 테스트
def api_call_clean_sfcr(sfcr_id):
    ni_nfvo_sfcr_api = get_nfvo_sfcr_api()
    api_response = ni_nfvo_sfcr_api.del_sfcr(sfcr_id)
    print("### clean_sfcr_api_response", api_response)


# TODO 성공 여부와 관련하여 예외처리 구현하기
# TODO 하드코딩 -> 입력으로 받을 수 있게 바꾸기
# deploy_vnf(deployment): change the VNF deployment according to the optimal VNF deployment prediction result
# Input : deployment
# Output: actual deployment in the testbed
def deploy_vnf(deployment, prefix):
    deploy_refer = deployment[0]
    # vnf_types = ["fw_1", "fw_3", "ids_1", "ids_2", "nat_1", "nat_2", "nat_3"]
    # default_flavor = "257aa80e-1fe9-4e37-8cd0-ca7d061429ba"
    # vnf type별.. flavor id 정의
    flavor_dict = {"fw_1": "efde3379-51f0-4143-8e5a-9668f16b6c39"
        , "fw_3": "efde3379-51f0-4143-8e5a-9668f16b6c39"
        , "ids_1": "c874fb47-3e31-49da-9641-5cadd39b5be0"
        , "ids_2": "c874fb47-3e31-49da-9641-5cadd39b5be0"
        , "nat_1": "efde3379-51f0-4143-8e5a-9668f16b6c39"
        , "nat_2": "efde3379-51f0-4143-8e5a-9668f16b6c39"
        , "nat_3": "efde3379-51f0-4143-8e5a-9668f16b6c39"
                   }
    image_dict = {"fw_1": "4fecb43b-a940-412c-9c3a-b7aea50cdd74"
        , "fw_3": "4fecb43b-a940-412c-9c3a-b7aea50cdd74"
        , "ids_1": "59d3dbf6-f6fc-4cac-a9a2-9e460fb669f3"
        , "ids_2": "59d3dbf6-f6fc-4cac-a9a2-9e460fb669f3"
        , "nat_1": "033ef41e-b50b-4988-bdd3-cc3c300b701d"
        , "nat_2": "033ef41e-b50b-4988-bdd3-cc3c300b701d"
        , "nat_3": "033ef41e-b50b-4988-bdd3-cc3c300b701d"
                  }

    # prefix가 None이면 'sh-'를 디폴트로 셋팅하게 함
    if prefix is None or prefix == '':
        prefix = 'sh-'
    deploy_status = get_current_vnf_deployment(prefix)

    deploy_action = deploy_refer - deploy_status
    # print("##deploy_action", deploy_action)
    # for i in range(0, len(deploy_refer)):
    ni_mon_api = get_monitoring_api()
    vnfis = ni_mon_api.get_vnf_instances()
    # print("###vnfis", vnfis)
    target_vnfi = [vnfi for vnfi in vnfis for vnf_type in vnf_types if
                   vnfi.name.startswith('sh-' + vnf_type) and vnfi.node_id is not None]
    # print("###target_vnfi", target_vnfi)

    error_vnfi = [vnfi for vnfi in vnfis for vnf_type in vnf_types if
                   vnfi.name.startswith('sh-' + vnf_type) and vnfi.node_id is None ]
    # print("###error_vnfi", error_vnfi)

    # Error 상태의 VNF 지우기
    # threads = []
    for e in range(0, len(error_vnfi)):
        # print("Threading start >>>deletion_target_id", error_vnfi[e].id)
        # t = threading.Thread(target=api_call_delete_vnf, args=(error_vnfi[e].id,))
        # t.start()
        # threads.append(t)
        # print("Threading end >>> vnf_inst_id")
        api_call_delete_vnf(error_vnfi[e].id,)
    # for t in threads:
    #     t.join()

    vnf_name_id_dict = {}  # { name : id,...}
    placement_id_dict = defaultdict(list)  # { (node_idx, vnf_type_idx) : id,...}
    for t in range(0, len(target_vnfi)):
        if target_vnfi[t].name.split('-')[-1] != "fixed":
            vnf_name_id_dict[target_vnfi[t].name] = target_vnfi[t].id
            node_idx = nodes_dict_r[target_vnfi[t].node_id]
            vnf_type_idx = vnf_types_dict_r[target_vnfi[t].name.split('-')[1]]
            placement_id_dict[(node_idx, vnf_type_idx)].append(target_vnfi[t].id)
    for i in range(0, len(deploy_action)):
        if nodes_type_dict[i] != "compute":
            continue
        # threads = []
        for j in range(0, len(deploy_action[i])):
            if deploy_action[i][j] < 0:
                for k in range(0, int(-deploy_action[i][j])):
                    if len(placement_id_dict[(i, j)]) > k :
                        deletion_target_id = placement_id_dict[(i, j)][k]
                        # print("Threading start >>>deletion_target_id", deletion_target_id)
                        # t = threading.Thread(target=api_call_delete_vnf, args=(deletion_target_id, ))
                        # t.start()
                        # threads.append(t)
                        # print("Threading end >>> vnf_inst_id")
                        api_call_delete_vnf(deletion_target_id, )
        # for t in threads:
        #     t.join()
        # threads = []
        for j in range(0, len(deploy_action[i])):
            if deploy_action[i][j] > 0:
                for k in range(0, int(deploy_action[i][j])):
                    vnf_spec_dict = {}
                    vnf_spec_dict["flavor_id"] = flavor_dict[vnf_types[j]]
                    vnf_spec_dict["image_id"] = image_dict[vnf_types[j]]
                    vnf_spec_dict["node_name"] = nodes_dict[i]
                    # vnf_spec_dict["user_data"] = "#cloud-config\npassword: dpnm123\nchpasswd: { expire: False }\nssh_pwauth: True\nmanage_etc_hosts: true\nruncmd:\n  - sysctl -w net.ipv4.ip_forward=1\n  - ifconfig ens3 mtu 1400\n  - ifconfig ens4 mtu 1400\n"
                    sample_user_data = "#cloud-config\n password: %s\n chpasswd: { expire: False }\n ssh_pwauth: True\n manage_etc_hosts: true\n runcmd:\n - sysctl -w net.ipv4.ip_forward=1"
                    vnf_spec_dict["user_data"] = sample_user_data % "dpnm"
                    vnf_spec_dict["vnf_name"] = "sh-" + vnf_types[j] + "-" + nodes_dict[i]
                    print("Threading start >>> vnf_spec_dict", vnf_spec_dict)
                    # t1 = threading.Thread(target=api_call_deploy_vnf, kwargs=(vnf_spec_dict))
                    # t1.start()
                    # threads.append(t1)
                    # print("Threading end >>> vnf_spec_dict")
                    api_call_deploy_vnf(**vnf_spec_dict)
        # for t in threads:
        #     t.join()
    return True


def api_call_deploy_vnf(**vnf_spec_dict):
    ni_nfvo_vnf_api = get_nfvo_vnf_api()
    vnf_spec = ni_nfvo_client.VnfSpec(flavor_id=vnf_spec_dict["flavor_id"],
                                      image_id=vnf_spec_dict["image_id"],
                                      node_name=vnf_spec_dict["node_name"],
                                      user_data=vnf_spec_dict["user_data"],
                                      vnf_name=vnf_spec_dict["vnf_name"])
    api_response = ni_nfvo_vnf_api.deploy_vnf(vnf_spec)
    print("### deploy_vnf_api_response", api_response)


def api_call_delete_vnf(vnf_inst_id):
    ni_nfvo_vnf_api = get_nfvo_vnf_api()
    api_response = ni_nfvo_vnf_api.destroy_vnf(vnf_inst_id)
    print("### delete_vnf_api_response", api_response)


# set_flow_classifier(sfcr_name, sfc_ip_prefix, nf_chain, source_client): create flow classifier in the testbed
# Input: flowclassifier name, flowclassifier ip prefix, list[list[each vnf id]], flowclassifier VM ID
# Output: response
# TODO 하드코딩 -> 입력으로 받을 수 있게 바꾸기
sfccat = {
    ("nat", "firewall", "ids"): 1,
    ("nat", "ids"): 2,
    ("nat", "firewall"): 3
}


# add_sfcr(prefix): create sfcr in the testbed
# Input: prefix
# Output: response
def add_sfcr(prefix):
    with open('./traf.txt', 'r') as ref:
        content = ref.readlines()
        nlines = len(content)
        # threads = []
        for i in range (0, nlines):
            line = content[i].strip().split(',')
            sfcr_spec_dict = {"name": prefix + "sfcr-" + str(i + 1),
                              "src_ip_prefix": line[2] + "/32",
                              "dst_ip_prefix": line[3] + "/32"}
            # nf_chain 에 sfc_type 을 표시하기 위함
            last_idx = -1
            for j in range(-1, -len(line) - 1, -1):
                if line[j] != "NA":
                    last_idx = j
                    break
            sfc_list = []
            for s in range(7, len(line) + last_idx + 1):
                sfc_list.append(line[s])
            sfc_tuple = tuple(sfc_list)
            sfc_type_idx = 0  # 정의되지 않은 sfc_type 인 경우 0으로 표시
            if sfc_tuple in sfccat:
                sfc_type_idx = sfccat[sfc_tuple]
            sfcr_spec_dict["name"] = sfcr_spec_dict["name"] + "_type-" + str(sfc_type_idx)
            nf_chain = []
            for l in range(0, len(sfc_list)):
                if sfc_list[l] == 'firewall':
                    vnf_type = 'fw_' + str(sfc_type_idx)
                else:
                    vnf_type = sfc_list[l] + '_' + str(sfc_type_idx)
                nf_chain.append(vnf_type)
            sfcr_spec_dict["nf_chain"] = nf_chain
            # source_client를 설정하기 위함
            ni_mon_api = get_monitoring_api()
            vnfis = ni_mon_api.get_vnf_instances()
            client_vnfi = [vnfi for vnfi in vnfis if vnfi.name.startswith(prefix + 'client')]
            source_client = ""
            for c in range(0, len(client_vnfi)):
                for cc in range(0, len(client_vnfi[c].ports)):
                    if client_vnfi[c].ports[cc].ip_addresses[0] == line[2]:
                        source_client = client_vnfi[c].id
            sfcr_spec_dict["source_client"] = source_client

            # print("Threading start >>> sfcr_spec_dict", sfcr_spec_dict)
            # t = threading.Thread(target=api_call_add_sfcr, kwargs=(sfcr_spec_dict))
            # t.start()
            # threads.append(t)
            # print("Threading end >>> sfcr_spec_dict")
            api_call_add_sfcr(**sfcr_spec_dict)
        # for t in threads:
        #     t.join()
    return True


def api_call_add_sfcr(**sfcr_spec_dict):
    ni_nfvo_sfcr_api = get_nfvo_sfcr_api()
    sfcr_spec = ni_nfvo_client.SfcrSpec(name=sfcr_spec_dict["name"],
                                        src_ip_prefix=sfcr_spec_dict["src_ip_prefix"],
                                        dst_ip_prefix=sfcr_spec_dict["dst_ip_prefix"],
                                        nf_chain=sfcr_spec_dict["nf_chain"],
                                        source_client=sfcr_spec_dict["source_client"])
    api_response = ni_nfvo_sfcr_api.add_sfcr(sfcr_spec)
    print("### add_sfcr_api_response", api_response)


# set_sfc(prefix): create sfc in the testbed
# Input: prefix
# Output: response
def set_sfc(prefix):
    ni_nfvo_api = get_nfvo_sfcr_api()
    sfcrs = ni_nfvo_api.get_sfcrs()
    target_sfcr = [sfcr for sfcr in sfcrs if sfcr.name.startswith(prefix)]

    ni_mon_api = get_monitoring_api()
    vnfis = ni_mon_api.get_vnf_instances()
    target_vnfi = [vnfi for vnfi in vnfis for vnf_type in vnf_types if vnfi.name.startswith(prefix + vnf_type) and vnfi.status == 'ACTIVE']
    # threads = []
    for i in range(0, len(sfccat)):
        sfc_spec_dict = {"sfc_name": prefix + "sfc_type-" + str(i + 1)}
        sfcr_ids = []
        nf_chain = []
        for j in range(0, len(target_sfcr)):
            if target_sfcr[j].name.endswith('type-' + str(i + 1)):
                if len(sfcr_ids) == 0:
                    nf_chain = target_sfcr[j].nf_chain
                sfcr_ids.append(target_sfcr[j].id)
        sfc_spec_dict["sfcr_ids"] = sfcr_ids

        if len(sfcr_ids) > 0:
            vnf_instance_ids = []
            for n in range(0, len(nf_chain)):
                vnf_instance_group = []
                for v in range(0, len(target_vnfi)):
                    if target_vnfi[v].name.split('-')[1] == nf_chain[n]:
                        vnf_instance_group.append(target_vnfi[v].id)
                vnf_instance_ids.append(vnf_instance_group)
            sfc_spec_dict["vnf_instance_ids"] = vnf_instance_ids

            # print("Threading start >>> sfc_spec_dict", sfc_spec_dict)
            # t = threading.Thread(target=api_call_set_sfc, kwargs=(sfc_spec_dict))
            # t.start()
            # threads.append(t)
            # print("Threading end >>> sfc_spec_dict")
            api_call_set_sfc(**sfc_spec_dict)
    # for t in threads:
    #         t.join()
    return True


def api_call_set_sfc(**sfc_spec_dict):
    ni_nfvo_sfc_api = get_nfvo_sfc_api()
    sfc_spec = ni_nfvo_client.SfcSpec(sfc_name=sfc_spec_dict["sfc_name"],
                                      sfcr_ids=sfc_spec_dict["sfcr_ids"],
                                      vnf_instance_ids=sfc_spec_dict["vnf_instance_ids"])
    api_response = ni_nfvo_sfc_api.set_sfc(sfc_spec)
    print("### set_sfc_api_response", api_response)


# 각각의 함수를 호출하는 main 함수 느낌
def execute_vnf_deployment(targetInfo, tool):
    topology = get_topology()
    node_feature, edge_feature = get_resource_usage(targetInfo.mon_win_sec)
    # print("#####", type(node_feature), type(topology), type(edge_feature))
    # print("###node_feature\n", node_feature)
    # print("###topology\n", topology)
    # print("###edge_feature\n", edge_feature)

    if tool == "ML":
        deployment = predict_op_vnf_deployment()
    elif tool == "ML_pred":
        deployment = predict_op_vnf_deployment2(node_feature, topology, edge_feature)      
    elif tool == "ILP":
        deployment = ilp_deployment_decision()
    # print(deployment)

    clean_sfc(targetInfo.sfc_prefix)
    clean_sfcr(targetInfo.sfcr_prefix)

    # deploy_vnf
    deploy_result = deploy_vnf(deployment, targetInfo.vnf_inst_prefix)
    # openstack상 vnf가 deploy되는 시간 대기
    time.sleep(30)

    add_sfcr(targetInfo.sfcr_prefix)
    set_sfc(targetInfo.sfc_prefix)

    return deployment


# ilp_deployment_decision(): get the VNF deployment decision from the ILP solution
# Input: -
# Output: deployment decision as np array (1,13,7)


vnf_types_ilp = ["firewall1", "firewall3", "ids1", "ids2", "nat1", "nat2", "nat3"]


def ilp_deployment_decision():
    # ILP 실행파일 실행
    runCPLEXPar(
        trafficListPath="solver_src/logs",
        topoFile="testbed-8",
        suffix="testbed-8",
        ncores=18)

    vnfTypes = get_vnf_types()

    # CPLEX 로그파일 파싱
    getPlacementInfoFromCPLEXLogs(
        logFilePath="solver_src/logs",
        suffix="testbed-8",
        vnfTypes=vnfTypes)

    # CPLEX 로그파일 파싱
    deployment = np.zeros((1, 13, 7))  # topology file과 middlebox-spec에서 참조하도록 수정 => (1, n_node, n_vnf_type)
    with open('solver_src/logs/nodeinfo-testbed-8.txt') as f:
        lines = f.readlines()
        initTime = 0
        for i in range(0, len(lines)):
            lLine = lines[i].split(',')
            if i == 0:
                initTime = lLine[0]
            if lLine[0] != initTime:
                break
            nodeIdx = int(lLine[1]) - 1
            vnfTypeIdx = vnf_types_ilp.index(lLine[2])
            deployment[0][nodeIdx][vnfTypeIdx] += 1

    # print("##deployment", deployment)
    return deployment


# Run CPLEX-based solver on all traffic files that match the supplied pattern.
# Detailed information regarding individual parameters can be found below (parser.add_argument(...)).
def runCPLEXPar(trafficListPath, topoFile, suffix, ncores):
    trafficListPattern = 'traf-%s-*' % suffix
    trafficLists = glob.glob(trafficListPath + '/' + trafficListPattern)
    for i in range(0, len(trafficLists)):
        runCPLEXSingleInstance(i, trafficListPath, topoFile, suffix);


# Just like runCPLEX, but performs only the i-th iteration.
def runCPLEXSingleInstance(i, trafficListPath, topoFile, suffix):
    trafficListPattern = 'traf-%s-*' % suffix
    trafficListPrefix = 'traf-%s-' % suffix
    trafficLists = glob.glob(trafficListPattern)
    nFiles = len(trafficLists)
    print('%05d/%05d' % (i, nFiles))
    outfile = open('%s/cplex-full-%s-%05d.log' % (trafficListPath, suffix, i), 'w')
    runcommand = './middleman --per_core_cost=0.01 --per_bit_transit_cost=3.626543209876543e-7 --topology_file=%s --middlebox_spec_file=middlebox-spec --traffic_request_file=logs/%s%05d --max_time=7200 --algorithm=cplex' % (
    topoFile, trafficListPrefix, i)
    subprocess.call(
        runcommand.split(),
        cwd='solver_src', stdout=outfile)


def getPlacementInfoFromCPLEXLogs(logFilePath, suffix, vnfTypes):
    logFilePattern = 'cplex-full-%s-*.log' % (suffix)
    logFiles = glob.glob(logFilePath + '/' + logFilePattern)
    nFiles = len(logFiles)
    with open('%s/nvnfs-%s.txt' % (logFilePath, suffix), 'w') as fout1, \
            open('%s/nodeinfo-%s.txt' % (logFilePath, suffix), 'w') as fout2, \
            open('%s/routeinfo-%s.txt' % (logFilePath, suffix), 'w') as fout3:
        for i in range(0, nFiles):
            if i % 100 == 0:
                print('file %05d of %05d' % (i, nFiles - 1))
            with open(logFiles[i]) as f:
                curlogfile = logFiles[i]
                curreqid = int(curlogfile.split('-')[-1].split('.')[0])

                # Go through logfile once, extracting relevant information.
                vnflocs = []
                routeinfo = []
                for line in f.readlines():
                    if 'vnfloc' in line:
                        vnflocs.append(line)
                    if 'routeinfo' in line:
                        routeinfo.append(line)

                ########################################
                ### Aggregated placement information ###
                ########################################

                if len(vnflocs) == 0:
                    print('[ WARN ] no vnfloc tag in file %s - skipping.' % logFiles[i])
                    continue
                # Last line gives final number of deployed middleboxes.
                nMiddleBoxes = vnflocs[-1]
                nMiddleBoxes = int(nMiddleBoxes.split(' ')[3])
                # Given the number of middleboxes, extract their location and type.
                middleboxLocations = []
                for line in vnflocs[-(nMiddleBoxes + 1):-1]:
                    (location, vnfType) = (int(line.split()[5]), line.split()[3][:-1])
                    middleboxLocations.append((location, vnfType))
                # Aggregate to get number of vnfs per type. -- FIXME: make more compact / readable.
                nPerType = [(vnfType, [item[1] for item in middleboxLocations].count(vnfType)) for vnfType in vnfTypes]
                # FIXME: generalize for the case of an arbitrary number of types.
                fout1.write('%d,%d,%s\r\n' % (curreqid, nMiddleBoxes, ','.join([str(item[1]) for item in nPerType])))

                # Number of instaces of a VNF per node.
                nodeinfo = [(item[0], item[1], middleboxLocations.count(item)) for item in set(middleboxLocations)]
                for line in nodeinfo:
                    fout2.write('%d,%d,%s,%d\r\n' % (curreqid, line[0], line[1], line[2]))

                ######################################
                ### Detailed placement information ###
                ######################################

                if len(routeinfo) == 0:
                    print('[ WARN ] no routeinfo tag in file %s - skipping.' % logFiles[i])
                    continue
                # Find index of last occurrence of " ... [routeinfo] start".
                startIdx = next(i for i in reversed(range(len(routeinfo))) if 'start' in routeinfo[i])
                routeinfo = routeinfo[(startIdx + 1):]
                currentprefix = '%d,' % (curreqid)
                for line in routeinfo:
                    currentinfo = re.sub(r'.*demand (\d+); mbox (\d+); node (\d+)', r'\1,\2,\3', line)
                    fout3.write(currentprefix + currentinfo.strip() + '\r\n')


# Get list of VNF types from middlebox-spec.
def get_vnf_types():
    res = []
    with open('solver_src/middlebox-spec') as f:
        for line in f.readlines():
            res.append(line.split(",")[0])
    res.sort()
    return res
