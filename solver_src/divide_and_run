#!/bin/bash

# ./divide_and_run.sh <simulation_name> <traffic_request_file_name> <topology_file_name> <time_horizon> <num_of_processes>

if (( $# != 5 )); 
then 
  echo "./divide_and_run.sh <simulation_name> <traffic_request_file_name> <topology_file_name> <time_horizon> <num_of_processes>"
  exit 1
fi

# arguments
sim_name=$1
traffic_request=$2
topology=$3
time_horizon=$4
process_count=$5

# create dir
folder_name=/home/mfbari/middlebox-placement/src/"$sim_name"_"$(date +%Y%m%d_%H%M%S)"
mkdir -p $folder_name

# partitioning of time instances
time_instances=($(cat "$traffic_request" | cut -d',' -f1 | sort -n | uniq))
time_instance_count=${#time_instances[@]}
partition_size=$((time_instance_count/process_count))
partition_points=()

# for last partition
if [ $(($time_instance_count % $process_count)) -gt 0 ]
then
  ((partition_size++))
fi

# populate the partition points 
for (( i=0; i<$process_count; i++ ))
do
  partition_points[$i]=${time_instances[$(($partition_size*$i))]}
done
# for indicating the last partition insert -1
partition_points[$i]=-1

echo "$partition_size" " time instances per process"

# partition the input file and run the program
start_ts=${partition_points[0]}
max_time=0;
for ((i=0; i<$process_count; i++ ))
do
  end_ts=${partition_points[$(($i+1))]}
  max_time=$(($end_ts))

  start_ln=$((`grep -n -m 1 "^$start_ts" $traffic_request | awk -F: '{print $1}'`))
  if [ $end_ts -eq -1 ]
  then
    end_ts=$((`tail -n1 $traffic_request | cut -d',' -f1`))
    end_ln=$((`wc -l < $traffic_request`))
    max_time=$(($time_horizon))
  else
    end_ln=$((`grep -n -m 1 "^$end_ts" $traffic_request | awk -F: '{print $1}'`-1))
  fi  
  
  sub_folder_name=$folder_name/run_"$start_ts"_"$end_ts"
  `mkdir -p $sub_folder_name`

  ## copy all input files in the subfolder
  `cp middleman "$topology" middlebox-spec "$sub_folder_name"/`
  echo "./middleman --per_core_cost=0.01 --per_bit_transit_cost=3.626543209876543e-7 --topology_file=$topology --middlebox_spec_file=middlebox-spec --traffic_request_file=$traffic_request --max_time=$max_time --algorithm=cplex" > "$sub_folder_name"/cplex_run
  `sed -n "$start_ln","$end_ln"p $traffic_request > "$sub_folder_name"/$traffic_request`

  ## run the processes
  (cd "$sub_folder_name" && `cat cplex_run` > output &)

  start_ts=$(($end_ts))
done

