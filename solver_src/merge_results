#!/bin/bash

# ./merge_results <folder_name> <traffic_request_file_name> <topology_file_name> <num_of_processes>

if (( $# != 4 )); 
then 
  echo ".merge_results <folder_name> <traffic_request_file_name> <topology_file_name> <num_of_processes>"
  exit 1
fi

# arguments
folder_name=$1
traffic_request=$2
topology=$3
process_count=$4

# create dir
folder_name=/home/mfbari/middlebox-placement/src/"$folder_name"
mkdir -p $folder_name

# partitioning of time instances
time_instances=($(cat "$traffic_request" | cut -d',' -f1 | sort -n | uniq))
time_instance_count=${#time_instances[@]}
partition_size=$((time_instance_count/process_count))
partition_points=()

# for last partition
if [ $(($time_instance_count % $process_count)) -gt 0 ]
then
  ((partition_size++))
fi

# populate the partition points 
for (( i=0; i<$process_count; i++ ))
do
  partition_points[$i]=${time_instances[$(($partition_size*$i))]}
done
# for indicating the last partition insert -1
partition_points[$i]=-1

echo "$partition_size" " time instances per process"

cost_ts_filenames=""
util_ts_filenames=""
sequences_filenames=""
paths_filenames=""

# partition the input file and run the program
start_ts=${partition_points[0]}
for ((i=0; i<$process_count; i++ ))
do
  end_ts=${partition_points[$(($i+1))]}

  #start_ln=$((`grep -n -m 1 "^$start_ts" $traffic_request | awk -F: '{print $1}'`))
  if [ $end_ts -eq -1 ]
  then
    end_ts=$((`tail -n1 $traffic_request | cut -d',' -f1`))
    #end_ln=$((`wc -l < $traffic_request`))
  #else
    #end_ln=$((`grep -n -m 1 "^$end_ts" $traffic_request | awk -F: '{print $1}'`-1))
  fi  
  
  sub_folder_name=$folder_name/run_"$start_ts"_"$end_ts"

  cost_ts_filenames="$cost_ts_filenames $sub_folder_name/log.cplex.cost.ts"
  util_ts_filenames="$util_ts_filenames $sub_folder_name/log.cplex.util.ts"
  sequences_filenames="$sequences_filenames $sub_folder_name/log.cplex.sequences"
  paths_filenames="$paths_filenames $sub_folder_name/log.cplex.paths"

  start_ts=$(($end_ts))
done

cat $cost_ts_filenames > "$folder_name"/log.cplex.cost.ts
cat $util_ts_filenames > "$folder_name"/log.cplex.util.ts
cat $sequences_filenames > "$folder_name"/log.cplex.sequences
cat $paths_filenames > "$folder_name"/log.cplex.paths

#`g++ -g -std=c++0x log_processor.cc -o log_processor`
#cp log_processor $traffic_request "$folder_name"/
#echo "./log_processor --per_bit_transit_cost=3.626543209876543e-7 --topology_file=$topology --middlebox_spec_file=middlebox-spec --traffic_request_file=$traffic_request --sequence_file=log.cplex.sequences --log_file_prefix=log.cplex --cplex_solution_path_file=log.cplex.paths" > "$folder_name"/log-cplex-command
#(cd "$folder_name" && `cat log-cplex-command`)
